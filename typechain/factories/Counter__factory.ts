/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Counter, CounterInterface } from '../Counter';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_job',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_credits',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_remainingCredits',
        type: 'uint256',
      },
    ],
    name: 'Worked',
    type: 'event',
  },
  {
    inputs: [],
    name: 'STATIC_JOB',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_job',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_credits',
        type: 'uint256',
      },
    ],
    name: 'addCredits',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'credits',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_job',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_credits',
        type: 'uint256',
      },
    ],
    name: 'work',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052600080546001600160a01b031916600e17905534801561002357600080fd5b50600080546001600160a01b03168152600160205260409020683635c9adc5dea000009055610271806100576000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806325b6488b14610051578063579f26f114610066578063871ff40514610096578063fe5ff468146100a9575b600080fd5b61006461005f3660046101cd565b6100d7565b005b600054610079906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100646100a43660046101cd565b61015f565b6100c96100b73660046101ac565b60016020526000908152604090205481565b60405190815260200161008d565b6001600160a01b038216600090815260016020526040812080548392906100ff90849061020e565b90915550506001600160a01b03821660008181526001602090815260409182902054825193845290830184905282820152517f6f653d4b441f6d850e399f2e486a61382790f5b05b216fb3f3e790224d224c3b9181900360600190a15050565b6001600160a01b038216600090815260016020526040812080548392906101879084906101f6565b90915550505050565b80356001600160a01b03811681146101a757600080fd5b919050565b6000602082840312156101bd578081fd5b6101c682610190565b9392505050565b600080604083850312156101df578081fd5b6101e883610190565b946020939093013593505050565b6000821982111561020957610209610225565b500190565b60008282101561022057610220610225565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212209444c0e7d2e41a2e85662c8a849fd786e394bc8a844df1dcffd788b4afedc57664736f6c63430008040033';

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
